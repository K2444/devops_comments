kubernets
2015 google is introduced kubernetes 
now maintained by CACF 
docker is a micro service
it's difficult to  manage to contianer in docker that's they move into kubernets
like kubernetees no of software intriduce befor kuber(nord, rancher, dockerswarm)
kubernetes satisfies the all the bussiness requirement like storage access networking security and ceritificates
we need a docker to create container
masternode (admin) 
workernode1
workernode1

cat /proc/cpuinfo | grep -i processor 
it will show how many cpu there
kubernetes will not recomment swap bcz it will throw error once we enable cluster.
sudo swapoff -a 
off swap in all nodes include master node till cluster enable 
free -m 
in kubernetes have one masternode and multiful workernde
masternode only give instruction to workernode
in masternode have to install ETCD, control manager, scheduler
ETCD server -----> database
     in the database all the data's are stored in key and value pair combination
     all transaction are saved  in this database.
control server:
   it will decide how many container have to be run in workernode
   it will maintain heartbeat
   if its die then it assign work to healthy node
scheduler:
it will assign the work to workernode
kubectl get ns  (namespace)
kubectl get pods -n kube-system
kubectl get nodes
kubectl describe nodes node1(name of the node)
node-its a physical (cpu) or virtual (vmr or cloud)
pod--- it's a logical wrapper for a containers >>> container to be cretaed in pod 
container--excutable units of software in which application code is packaged along with its liabraries
kubelet--- receive info from masternode
kuberproxy: communicate between one workernode to another workernode
one masternode and multiful workernode
workernode--->pod---->container (in real time multiful pod and multiful container to be run)
in masternode is another name is controlplan 
masternode + workernode its a kubernets cluster
etc/kubernetes/manifasts have all the yaml files
kubectl create -f pode.yaml
kubectl desctibe <pode name>

kubectl get namespace
kubectl create namespace dev 
kubectl config view | grep namespace
kubectl config set-context --current --namespaces=<ns>
kubectl -f pod.ymal --ns dev

k get pods --selector app=app1
k get svc ---- or k get service
k run ind-pod --image nginx 
k get node
    k get node
    5  k get pod
    6  k run pod1 --image iginx 
    7  k get pod -o wide
    8  k taint node node01 env=uat:NoSchedule 
    9  k run pod2 --image iginx 
   10  k get pod -o wide
   11  history
   12  k describe node nodeo1
   13  k describe node node01
   14  k describe node node01 | less
   15  k edit pod2
   16  k edit pod pod2
   17  k run pod3 --image iginx --dry-run=client -o yaml
   18  k run pod3 --image iginx --dry-run=client -o yaml > pod3.yaml
   19  k edit pod pod3.yqml
   20  k edit pod pod3.yaml
   21  vi pod3.yaml 
   22  k create -f pod3.yaml 
   23  k get pod -o wide
k taint node node01 env=uat:NoSchedule-    untaint
======================================================================================
masternode
kubeapiserver --------->> primary component / communication between masternode and workernode
                          iis a like admin
ETDC ------------------>> it's a inbuild datebase && internal database
                            all the info are saved in the database

kubecontroller--------->> monitors the workernode to health of the container. because if everthng ok means kubeapi server create a pod in that workernode
kubeserver------->>> findout the best pod to create a container
=======================================================
workernode:
-------------------------------------
kubelet -----> operate pod from api server instruction
kubeproxy ----->maintain network rules on node and enable between pod and external api server
                communicate between one workernode to another workernode
====================================
yaml:
pod creation:
------------------
apiVersion: v1
kind:pod
metadata
spec
replicaset creation:
------------------
apiVersion:app/v1
kind:replica
metadata
spec
replicatset means how many to be create in wokernode
deployment---service
             how many pod and container
deployment:
kubectl create deployment --image nginx:1.21 --port 80 --replicas:3 test-rs
                                   <img>         <expose port>     <how many pod>   <name of the label>
kubectl get deploy
kubectl dectribe deploy test-rs
=============================================
kubectl delete pod <pod-name>
kubectl delete service <service-name>
kubectl delete deployment <deployment-name>
kubectl delete statefulset <statefulset-name>
kubectl delete replicaset <replicaset-name>
kubectl get pods
kubectl get services
kubectl get deployments
kubectl get statefulsets
kubectl get replicasets
kubectl delete node <old-node-name>
systemctl stop kubelet
--------------------------------------
monitor cluster:
curl -LO https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

edit components.yaml
 spec:
      hostNetwork: true  <this should be true>
      containers:
      - args:
        - --cert-dir=/tmp
        - --secure-port=10250
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --kubelet-insecure-tls <add in the components.yml file>
kubectl create -f <components.yaml>
if you want to replace the existing one
kubectl replace --force -f <Yamal file name>
kubectl get pod kube-systen | grep -i < name of the pod or node>
k top nodes
monitor via grafana integration:
k get logs <pod name>
kubectl run my-pod --image nginx --->creating pod
kubectl edit pod <pod name>
k edit pod my-pod
=================================
rollback:
there ara two ways to rollback kubernets
  1. recreate 
  2. rolling update
Recreate:
 in the recreate, it will down the all pods and up (create) new pods for the new updates. if any errors cause the application will go down
rolling update:
up and down occure one by one.
create deployment yaml file
do deployment
and upade the new version
kubectl rollout status deployment <deployment name>
k rollout history deployment nginx-deployment <name of the deployment>
kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1
k get pod
k get deployments.apps 
k get rs







     














