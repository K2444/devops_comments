what is ansible?
ansible is open source and automation tool.
usinng ansible lets you automate virtually any task
common use cases for Ansible: 
  Eliminate repetition and simplify workflows
  Manage and maintain system configuration
  Continuously deploy complex software
  Perform zero-downtime rolling updates
ansible playbook and ad hoc comments
ad hoc comments:
quick and easy
automate single task
non-repetitive task
use case:
rebooting server:
ansible all -a '/sbin/rebool'
managing files:
ansible all -m copy -a "src=/etc/host dest=/tmp/host"
managing packages etc:
ansible webserver -m apt -a "name=apache2 state=present"
playbook:
Ansible Playbooks offer a repeatable, reusable, simple configuration management and multi-machine deployment system, one that is well suited to
deploying complex applications. If you need to execute a task with Ansible more than once, 
write a playbook and put it under source control.
simple configuration
Repetitive 
Reusable
use-case:
orchestrate plays on multiple machines
Why use Ansible?
One of the most significant advantages of Ansible is that it is free to use by everyone.
It does not need any special system administrator skills to install and use Ansible, and the official documentation is very comprehensive.
Its modularity regarding plugins, modules, inventories, and playbooks make Ansible the perfect companion to orchestrate large environments.
Ansible is very lightweight and consistent, and no constraints regarding the operating system or underlying hardware are present.
It is also very secure due to its agentless capabilities and due to the use of OpenSSH security features.
Another advantage that encourages the adoption of Ansible is its smooth learning curve determined by the comprehensive documentation and easy to learn structure and configuration.
2. What Is Inventory ?
In Ansible, an inventory is a file with specifying the information of hosts that going to be managed. It contains information such as hostnames, IP addresses, and groups of organization. 
The inventory can be either static or dynamic, and it may be with inclusion of variables by specific host details. It’s a key 
component for targeting and managing nodes infrastructure in Ansible. A sample inventory file is given below.
[name of the host]
either ip address or host name 
4. What Are The Features Of Ansible ?
Ansible comes with several features that make it powerful and popular automation tool. A few of the key features are listed here:

Agentless: Ansible does not require any agent installation on the managed nodes. It communicates with the nodes in the network using SSH simplifying deployment and reduces complexity.
Declarative Language: Ansible uses a simple human-readable YAML syntax to specify the desired state of the system making it easy to write and understand automation scripts.
Idempotent Operations: Ansible ensures for the achievement of desired state i.e., running a playbook multiple times has the same effect as running it once. This prevents from unintended changes ensuring consistency.
Playbooks: Automation scripts in Ansible are known as playbooks. Playbooks are written in YAML by defining a set of tasks that to be executed on remotely specifying in the hosts section.
Modules: Modules are used in ansible to perform specific tasks on managed nodes.They are 2 types of modules as built-in modules 
( that are already created and comes with ansible ) and custom modules that are created by users.
Inventory Management: Ansible uses an inventory file to specify the hosts information such as IP address or domainname, user details etc.. on which the automation tasks have to be executed. The inventory file can be either static or dynamic include host groups.
-----------------------
Ansible Galaxy:
features sharing and downloading the ansible roles

modules:
Modules are used in ansible to perform specific tasks on managed nodes.
Modules (also referred to as “task plugins” or “library plugins”) are discrete units of code that can be used from the command line or in a playbook task.

task executional unts

plugins:

enhancing Ansible’s functionality by extending its capabilities

ansible task:
inditual task unit within playbook coming with defined action that to be perfomed on remote host

ansible stand out from other configuration management:
Ansible’s agentless architecture and its simplicity in use (YAML syntax), and ease of setup contribute to its
standout features among other Configuration Management tools. 

9.Briefly Explain Ansible’s Architecture Through Outlining Its Different Components.
The control node communicates with managed nodes through SSH protocol executing tasks defined in playbooks. Ansible consists of a control node, managed nodes,
inventory, modules, and plugins.

What Is The Foundational Programming Language Of Ansible?
python is the foundational programming language of ansible 
python's wide range of adoption provided good community support, making ansible an effective and flexiable automation tool.

What are handlers in Ansible, and how are they used in playbooks?
Handlers in Ansible are tasks that are triggered by other tasks, usually used to respond for the changes that require start , stop , reload or restart the service actions. 
They are defined in the playbook and executed as per need.

What is configuration management?
Configuration Management is the process of maintaining systems, such as computer hardware and software, in a desired state. Configuration Management (CM) is also a method of ensuring that systems perform in a manner consistent with expectations over time.
Why is Configuration Management important?
Configuration Management helps prevent undocumented changes from working their way into the environment. By doing so, CM can help prevent performance issues, system inconsistencies, or compliance issues that can lead to regulatory fines and penalties. Over time, these undocumented changes can lead to system downtime, instability, or failure.

without CM, we have to do all the process manually. its too complex in lager systems.

A Configuration management system allows the enterprise to define settings in a consistent manner, then to build and maintain them according to the established baselines. A configuration management plan should include a number of tools that:

Enable classification and management of systems in groups
Make centralized modifications to baseline configurations
Push changes automatically to all affected systems to automate updates and patching
Identify problem configurations that are underperforming or non-compliant
Automate prioritization of actions needed to remediate issues•
Apply remediation when needed.
As organizations increasingly adopt a microservices architecture composed of many code segments of various size connected by APIs, the need for a consistent configuration management process becomes even more apparent, where each service utilizes metadata that encodes specs for resource allocation, secrets like passwords, and endpoints that define connections to other services for registration and initialization.

Through the use of these tools, a configuration management plan provides a ‘single version of the truth’ for the desired state of systems across the organization by giving visibility to any configuration modifications, enabling audit trails and tracking of every change made to the system.
What are Benefits of Configuration Management?
Utilizing a Configuration Management system helps avoid problems that occur when hardware and software systems are improperly configured. Simply tracking changes can help avoid expensive remediation projects down the road. CM is insurance you pay for today so you can prevent issues tomorrow. For example, Configuration Management helps ensure the development, test, and production environments are the same, so that deployed applications will behave in the manner that is expected of them. 
What are the requirements for the Ansible server?
If you are a Windows user, then you need to have a virtual machine on which Linux should be installed. Ansible Server requires Python 2.6 version or higher. If these requirements are fulfilled, then you can proceed with ease.
What are Ansible tasks?
The task is a unit action in Ansible. It breaks a configuration policy into smaller files or blocks of code. These blocks can be useful in automating a process, for example, to install a package or update software:
Which protocol does Ansible use to communicate with Linux and Windows?
In Linux systems, the Secure Shell (SSH) protocol is employed, while Windows systems utilize the Windows Remote Management (WinRM) protocol.
What are ad hoc commands? Give an example.
Ad hoc commands are simple, one-line commands used to perform a certain task. You can think of ad hoc commands as an alternative to writing playbooks. An example of an ad hoc command is as follows:
Command: ansible host -m netscaler -a "nsc_host=nsc.example.com user=apiuser password=apipass"
 What is a YAML file and how do we use it in Ansible?
YAML files are like any formatted text file, with a few sets of rules similar to those of JSON or XML. Ansible uses this syntax for playbooks as it is more readable than other formats.







